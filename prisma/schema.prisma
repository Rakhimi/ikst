generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum AnswerOption {
  A
  B
  C
  D
  UNANSWERED
}

enum GradeOption {
    GR3
    GR7
}

enum TypeOption {
    Islamic
    Quran
}

model User {
  id             Int          @id @default(autoincrement())
  email          String       @unique
  hashedPassword String       // Storing the hashed password
  maiden         String
  sport          String
  color          String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  role           UserRole     @default(USER)

  profiles       Profile[]    @relation("UserProfiles")
  questionSets   QuestionSet[] @relation("UserQuestionSets")
}

model Profile {
  id         Int         @id @default(autoincrement())
  firstName  String   
  lastName   String   
  school     String
  grade      String
  code       String      @unique
  result     String?  

  user       User        @relation("UserProfiles", fields: [userId], references: [id])
  userId     Int         // Foreign key for User

  answerSets AnswerSet[] // Relation to AnswerSet
}

model QuestionSet {
  id          Int          @id @default(autoincrement())
  title       String       // Title or description of the question set
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user        User         @relation("UserQuestionSets", fields: [userId], references: [id])
  userId      Int          // Foreign key for User

  questions   Question[]   @relation("SetQuestions")  // Relation to questions
  answerSets  AnswerSet[]  // Relation to AnswerSets
  results     Result[]     // Relation to Results (for each QuestionSet)

  startTime   DateTime      @default("2024-01-01T00:00:00Z")
  endTime     DateTime      @default("2024-01-01T00:00:00Z")    

  grade       GradeOption  @default(GR3)
  type        TypeOption   @default(Quran)
  completed    Boolean      @default(false)
}


model Question {
  id          Int          @id @default(autoincrement())
  question    String
  option1     String
  option2     String
  option3     String
  option4     String
  answer      AnswerOption
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  questionSet QuestionSet  @relation("SetQuestions", fields: [questionSetId], references: [id], onDelete: Cascade)
  questionSetId Int        // Foreign key for QuestionSet

  answers     Answer[]     @relation("QuestionAnswers") // Relation to Answer
}

model AnswerSet {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())

  profile     Profile      @relation(fields: [profileId], references: [id])
  profileId   Int          // Foreign key for Profile

  questionSet QuestionSet  @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  questionSetId Int        // Foreign key for QuestionSet

  answers     Answer[]     @relation("AnswerSetAnswers") // Answers within this AnswerSet
}

model Answer {
  id          Int          @id @default(autoincrement())
  option      AnswerOption?

  answerSet   AnswerSet    @relation("AnswerSetAnswers", fields: [answerSetId], references: [id])
  answerSetId Int          // Foreign key for AnswerSet

  question    Question     @relation("QuestionAnswers", fields: [questionId], references: [id])
  questionId  Int          // Foreign key for Question
}

model Result {
  id          Int          @id @default(autoincrement())
  score       Int          // Result score or value

  questionSet QuestionSet  @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  questionSetId Int        // Foreign key for QuestionSet

  school      Int          // The result for a particular school (e.g., the average score)
  allSchool   Int          // The result across all schools
}
