generator client {
provider = "prisma-client-js"
binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  hashedPassword String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  color          String
  maiden         String
  role           UserRole      @default(USER)
  sport          String
  profiles       Profile[]     @relation("UserProfiles")
  questionSets   QuestionSet[] @relation("UserQuestionSets")
}

model Profile {
  id         Int          @id @default(autoincrement())
  userId     Int
  firstName  String
  lastName   String
  code       String       @unique
  school     SchoolOption @default(ALSTX)
  grade      GradeOption  @default(GR3)
  answerSets AnswerSet[]
  user       User         @relation("UserProfiles", fields: [userId], references: [id])
}

model QuestionSet {
  id           Int         @id @default(autoincrement())
  title        String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       Int
  grade        GradeOption @default(GR3)
  type         TypeOption  @default(Quran)
  endTime      DateTime    @default(dbgenerated("'2024-01-01 00:00:00'"))
  startTime    DateTime    @default(dbgenerated("'2024-01-01 00:00:00'"))
  completed    Boolean     @default(false)
  answerSets   AnswerSet[]
  islamicCycle Cycle?      @relation("IslamicCycle")
  quranCycle   Cycle?      @relation("QuranCycle")
  questions    Question[]  @relation("SetQuestions")
  user         User        @relation("UserQuestionSets", fields: [userId], references: [id])
  results      Result[]
}

model Cycle {
  id           Int         @id @default(autoincrement())
  name         String
  grade        GradeOption
  year         Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  islamicSetId Int         @unique
  quranSetId   Int         @unique
  islamicSet   QuestionSet @relation("IslamicCycle", fields: [islamicSetId], references: [id])
  quranSet     QuestionSet @relation("QuranCycle", fields: [quranSetId], references: [id])
}

model Question {
  id            Int          @id @default(autoincrement())
  question      String
  option1       String
  option2       String
  option3       String
  option4       String
  answer        AnswerOption
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  questionSetId Int
  answers       Answer[]     @relation("QuestionAnswers")
  questionSet   QuestionSet  @relation("SetQuestions", fields: [questionSetId], references: [id], onDelete: Cascade)
}

model AnswerSet {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  profileId     Int
  questionSetId Int
  result        Int?
  answers       Answer[]    @relation("AnswerSetAnswers")
  profile       Profile     @relation(fields: [profileId], references: [id])
  questionSet   QuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
}

model Answer {
  id          Int           @id @default(autoincrement())
  option      AnswerOption?
  questionId  Int
  answerSetId Int
  answerSet   AnswerSet     @relation("AnswerSetAnswers", fields: [answerSetId], references: [id], onDelete: Cascade)
  question    Question      @relation("QuestionAnswers", fields: [questionId], references: [id])
}

model Result {
  id            Int          @id @default(autoincrement())
  score         Int
  questionSetId Int
  allSchool     Int
  school        SchoolOption
  questionSet   QuestionSet  @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

enum AnswerOption {
  A
  B
  C
  D
  UNANSWERED
}

enum GradeOption {
  GR3
  GR7
}

enum SchoolOption {
  ALSTX
  WDLTX
  BILTX
  MCAMI
  MABIL
}

enum TypeOption {
  Islamic
  Quran
}
